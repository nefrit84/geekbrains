---
name: geekbrains

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.14.0"
      - name: Install dependencies
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Run vet & lint
        run: |
          go vet .
          golint .
      - name: Test End
        run: echo "ОК"
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.run_id }}
  deploy_stage:
    name: Deploy to stage
    needs: build
    runs-on: ubuntu-latest
    container:
      image: bitnami/kubectl:1.22
      volumes:
        - /kube:/tmp
    env:
      K8S_API_URL: https://87.239.106.21:6443
      K8S_STAGE_CI_TOKEN: "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqVlNjRE54YkVWWWF6UlpNVmh5UTBWdlducFNORlZmV0cxcU56RjZkRmwzY21sTU5rSkVkMlJ3TldzaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUp6ZEdGblpTSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWamNtVjBMbTVoYldVaU9pSmtaWEJzYjNrdGRHOXJaVzR0TW0xa2FtUWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2laR1Z3Ykc5NUlpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WlhKMmFXTmxMV0ZqWTI5MWJuUXVkV2xrSWpvaU1qSmpPV013WW1RdFkyTTVaQzAwWVdObUxXRTBNbU10TUdVeVpURTFOVGN6TUdSbElpd2ljM1ZpSWpvaWMzbHpkR1Z0T25ObGNuWnBZMlZoWTJOdmRXNTBPbk4wWVdkbE9tUmxjR3h2ZVNKOS5zRjV2ZjBaV3VYc2tyVWZJQV9VQmJGRnNsaU5CZUVsbGt4M1RBbVRKZE1tNUIycjVQS0VvQ1FnOFFJMW1oNlMyQ3RoM1Nnb3pMb2FxbjJwV0hySWVQS2dTcUZZdV9wZ2d1WkllRkxEUkVLOEpBQWpwb3dQWjRrRG9iTml2dWNVbnY4M3ZSdlVVakNhbUNCQUZWSnBJZEhsR0hTakltQkpxRXZ6OTFreUttZmNZM080Wm9SbndCYTdyYV9RV010REk5aS1ib1R0RHk1QXJtVkJaUGhaTWxVc3NzUGhPWWd2NFZSQTdyS2xIMURiOEJVWGlNNTVJbGl5OWZlTVNsM2ZKS1BzQjJtZWppSFl5NUJKbWFvSk9pbEZwMDZfb3JoQ0VxMEFxV3VEdzRJVVdtUXFwSVJRaUhucVRGYllNSnZSZk9HWExiNm9Qb0VDb2RQQjdlUUZhQmc="
      K8S_PROD_CI_TOKEN: "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqVlNjRE54YkVWWWF6UlpNVmh5UTBWdlducFNORlZmV0cxcU56RjZkRmwzY21sTU5rSkVkMlJ3TldzaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUp3Y205a0lpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WldOeVpYUXVibUZ0WlNJNkltUmxjR3h2ZVMxMGIydGxiaTA0Y2pReU1pSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSmtaWEJzYjNraUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNTFhV1FpT2lJeE5UWXhaVFUwTVMxa09UZGpMVFF3WTJZdFltVmtPUzAzWWpnd01ESTFPR0poTWpraUxDSnpkV0lpT2lKemVYTjBaVzA2YzJWeWRtbGpaV0ZqWTI5MWJuUTZjSEp2WkRwa1pYQnNiM2tpZlEuZTNsTlc2RjBESHNiTXROcjZQMkRnNjJsVExxRFJJeUU4WFFvQU1vdmVpdmgzblRLVzI1VHVWckZuclNIWUhOVEdxaV9xSTMzMmFxOEE3QUxNUVgwcG1XYVNpeWJTLVB1OUNab0RSNEs2UjF2N1JBS2YwS2kyM29jWDBDTG04RGtDV3ptSjZnbmVPOXQxbkQ5dFVudVNDVTM0STRiVDA4SzB5Q2l0c0NqWFlyVXR2OU5pX1JaUUMzd1VhSWtOellDek1uMXRyeXV0UGxQcXk1TnM5b1E5alhxbzhmb0ZmTUNPcmQ5MGpodGxSYzk5amZIVkhGY3Q5THRvdVRSV3lYQzlrSVBhTzBXaFViTW9vSWR3Y2lremdDcFF2cERGSDBYNzNaOHllM1R2eldHdmh1ZkdUdFU0eXk4aDdjbnQ2NGw1bjNneEM1RkJ5Y2s3djZudnZINnRR"
      CI_STAGE_NAME: stage
      CI_PROD_NAME: prod
      CI_PROJECT_NAME: ${{ github.workflow }}
      CI_REGISTRY_IMAGE: ghcr.io/${{ github.repository }}:${{ github.run_id }}
    steps:
      - run: export KUBECONFIG=/tmp/.kubeconfig
      - run: kubectl config set-cluster kubernetes-cluster-4420 --insecure-skip-tls-verify=true --server=$K8S_API_URL
      - run: kubectl config set-credentials kubernetes-cluster-4420 --token=$(echo $K8S_STAGE_CI_TOKEN | base64 --decode)
      - run: kubectl config set-context default/kubernetes-cluster-4420 --cluster=kubernetes-cluster-4420 --user=kubernetes-cluster-4420
      - run: kubectl config use-context default/kubernetes-cluster-4420
      - run: kubectl set image deployment/$CI_PROJECT_NAME *=$CI_REGISTRY_IMAGE --namespace $CI_STAGE_NAME
      - run: kubectl config set-credentials kubernetes-cluster-4420 --token=$(echo $K8S_PROD_CI_TOKEN | base64 --decode)
      - run: kubectl set image deployment/$CI_PROJECT_NAME *=$CI_REGISTRY_IMAGE --namespace $CI_PROD_NAME
